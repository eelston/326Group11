import { Sequelize, DataTypes } from "sequelize";
import path from 'path';
import { fileURLToPath } from 'url';
import { Location } from "../locations/locations.js";
import SQLiteLocationModel from "../locations/locations.js";

// get folder name for current file
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// initialize new Sequelize instance with SQLite
const sequelize = new Sequelize({
    dialect: "sqlite",
    storage: path.resolve(__dirname, "../src/data/reports.sqlite"), // absolute path to folder for report database
});

// define report model
export const Report = sequelize.define("Report", {
    id: { // unique universal identifier
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
    },

    location: { // name of corresponding location/building
        type: DataTypes.STRING,
        allowNull: false
    },

    floor: { // floor name, if applicable
        type: DataTypes.STRING,
        // allowNull defaults to true
    },

    score: { // crowding report score
        type: DataTypes.NUMBER,
        allowNull: false
    },

    // timestamp/report submission is generated by SQLite
    // using Date.parse to convert createdAt value to timestamp where needed
});

// define associations (ref: https://sequelize.org/docs/v6/advanced-association-concepts/creating-with-associations/)
// Location.Report = Location.hasMany(Report, { // one Location has many Reports
//     sourceKey: "location" // foreignKey will reference the 'location' attribute of the Location model
// });
// Report.Location = Report.belongsTo(Location); // each Report belongs to a single Location

class _SQLiteReportModel {
    constructor() {}

    async init(demo = false) {
        await sequelize.authenticate(); // check connection
        await sequelize.sync(); // sync model with database
        // { force: true } overwrites existing database table to match model

        console.log("Report database synchronized successfully"); // no exceptions from above thrown

        if (demo) { // create new with mock data for demo day
            await this.delete();

            // mock/default report data
            await this.create({
                location: "Courtside Cafe",
                score: 1,
            });

            await this.create({
                location: "Science & Engineering Library",
                floor: "2",
                score: 3,
            });

            await this.create({
                location: "Science & Engineering Library",
                floor: "3",
                score: 2,
            });

            await this.create({
                location: "Science & Engineering Library",
                floor: "3",
                score: 4,
            });

            await this.create({
                location: "Student Union",
                floor: "2",
                score: 4,
            });

            await this.create({
                location: "Student Union",
                floor: "3",
                score: 2,
            });

            await this.create({
                location: "Integrated Learning Center",
                floor: "1",
                score: 3,
            });

            await this.create({
                location: "Integrated Learning Center",
                floor: "2",
                score: 4,
            });

            
            await this.create({
                location: "Integrated Learning Center",
                floor: "3",
                score: 2,
            });

            await this.create({
                location: "DuBois Quiet Study",
                floor: "2",
                score: 3,
            });

            await this.create({
                location: "DuBois Quiet Study",
                floor: "5",
                score: 5,
            });

            await this.create({
                location: "DuBois Quiet Study",
                floor: "8",
                score: 2,
            });
        }
    }

    async create(report) {
        console.log("Received report to create:", report)
        // update corresponding location
        const location = await SQLiteLocationModel.read(report.location); // get location corresponding to report

        const newReport = await Report.create(report); // build and save report

        // // update reports array (depending on building type), .update() ref: https://sequelize.org/docs/v7/querying/update/
        if (location.type === "Single-Floor") {
            let reportsArr = JSON.parse(location.reports); // get reports array
            reportsArr = [newReport.id, ...reportsArr];  // add report id to BEGINNING of reports array
            location.update({ reports: JSON.stringify(reportsArr) }); // add report id to reports array

        } else if (location.type === "Multi-Floor") {
            const floors = JSON.parse(location.floors); // get floors array of objects (convert JSON -> array)
            const index = floors.findIndex(floor => floor.name === newReport.floor) // get index of floor corresponding to report
            floors[index].reports.push(newReport.id); // add id to floor's reports array
            location.update({ floors: JSON.stringify(floors) }); // update location floors array (as JSON)
        }

        return newReport; 
    }

    async read(id = null) {
        if (id) { // if id is provided
            return await Report.findByPk(id); // return specified report (find by primary key)
        }

        return await Report.findAll(); // otherwise return all stored reports
    }

    async delete(report = null) {
        if (report === null) { // specific report not provided
          await Report.destroy({ truncate: true }); // remove all reports
          return; // escape
        }
    
        await Report.destroy({ where: { id: report.id } }); // remove specific report
        return report;
      }
}

// export singleton instance
const SQLiteReportModel = new _SQLiteReportModel();
export default SQLiteReportModel;
